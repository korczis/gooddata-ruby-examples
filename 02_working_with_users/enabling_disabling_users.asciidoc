=== Enabling and disabling user
by Tomas Svarovsky

==== Problem
You need to enable or disable users in a project.
This works only in 0.6.12 (not yet released)

==== Prerequisites
You have to have a user who is an admin in a project you would like to disable users in.

==== Solution

Disable and enable particular user in GoodData project

[source,ruby]
----
# encoding: utf-8

require 'gooddata'

# Connect to platform using credentials
GoodData.with_connection do |c|
  project = c.projects(PROJECT_PID)
  user = project.member('john@example.com')
  user.disable
  # You can reenable the user again
  user.enable
end
----

Disable all users in GoodData project

[source,ruby]
----
# encoding: utf-8

require 'gooddata'

# Connect to platform using credentials
GoodData.with_connection do |c|
  project = c.projects(PROJECT_PID)

  # We collect all users minus current user
  # so we do not disable ourselves from the project
  users_to_disable = project.users.reject { |u| u.login == c.user.login }

  # disable all users
  users_to_disable.pmap {|u| u.disable}
end
----

If you want to keep more than one user you can do something like this

[source,ruby]
----
# encoding: utf-8

require 'gooddata'

# Connect to platform using credentials
GoodData.with_connection do |c|
  project = c.projects(PROJECT_PID)

  keepers = ['john@example.com', c.user.login]

  # We collect all users and remove those from the keepers array
  users_to_disable = project.users.reject { |u| keepers.include?(u.login) }

  # disable all users
  users_to_disable.pmap { |u| u.disable }
end
----

==== Discussion

As you can see from the above examples possibilities are endless and you can easily enable or disable users just by correctly prepare the array of users to work with by using regular methods on arrays.